# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MovementsEnactionInner(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, _from: str=None, to: str=None, transformation: str=None, type: str=None,
                 dalid: str=None, vdcid: str=None):  # noqa: E501
        """MovementsEnactionInner - a model defined in Swagger

        :param _from: The _from of this MovementsEnactionInner.  # noqa: E501
        :type _from: str
        :param to: The to of this MovementsEnactionInner.  # noqa: E501
        :type to: str
        :param transformation: The transformation of this MovementsEnactionInner.  # noqa: E501
        :type transformation: str
        :param type: The type of this MovementsEnactionInner.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            '_from': str,
            'to': str,
            'transformation': str,
            'type': str,
            'dalid': str,
            'vdcid': str
        }

        self.attribute_map = {
            '_from': 'from',
            'to': 'to',
            'transformation': 'transformation',
            'type': 'type',
            'dalid': 'dalid',
            'vdcid': 'vdcid'
        }
        self.__from = _from
        self._to = to
        self._transformation = transformation
        self._type = type
        self._dalid = dalid
        self._vdcid = vdcid

    @classmethod
    def from_dict(cls, dikt) -> 'MovementsEnactionInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The movementsEnaction_inner of this MovementsEnactionInner.  # noqa: E501
        :rtype: MovementsEnactionInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _from(self) -> str:
        """Gets the _from of this MovementsEnactionInner.


        :return: The _from of this MovementsEnactionInner.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from: str):
        """Sets the _from of this MovementsEnactionInner.


        :param _from: The _from of this MovementsEnactionInner.
        :type _from: str
        """

        self.__from = _from

    @property
    def to(self) -> str:
        """Gets the to of this MovementsEnactionInner.


        :return: The to of this MovementsEnactionInner.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to: str):
        """Sets the to of this MovementsEnactionInner.


        :param to: The to of this MovementsEnactionInner.
        :type to: str
        """

        self._to = to

    @property
    def transformation(self) -> str:
        """Gets the transformation of this MovementsEnactionInner.


        :return: The transformation of this MovementsEnactionInner.
        :rtype: str
        """
        return self._transformation

    @transformation.setter
    def transformation(self, transformation: str):
        """Sets the transformation of this MovementsEnactionInner.


        :param transformation: The transformation of this MovementsEnactionInner.
        :type transformation: str
        """

        self._transformation = transformation

    @property
    def type(self) -> str:
        """Gets the type of this MovementsEnactionInner.


        :return: The type of this MovementsEnactionInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this MovementsEnactionInner.


        :param type: The type of this MovementsEnactionInner.
        :type type: str
        """

        self._type = type

    @property
    def vdcid(self) -> str:
        return self._vdcid

    @vdcid.setter
    def vdcid(self, vdcid: str):
        self._vdcid = vdcid

    @property
    def dalid(self) -> str:
        return self._dalid

    @dalid.setter
    def dalid(self, dalid: str):
        self.dalid = dalid
